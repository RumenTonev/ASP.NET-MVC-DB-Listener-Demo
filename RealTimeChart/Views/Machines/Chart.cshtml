
<div>
    @Scripts.Render("~/bundles/jquery")
    <!--[if lte IE 8]><script language="javascript" type="text/javascript" src="~/Scripts/excanvas.js"></script><![endif]-->
    <script src="~/Scripts/jquery.flot.js" type="text/javascript"></script>
    <script src="~/Scripts/jquery.signalR-1.1.3.min.js" type="text/javascript"></script>
    <script src="/signalr/hubs" type="text/javascript"></script>
    <div id="body">
        <div style="text-align: center">
            <h1 style="float:left">
                CPU: <span id="cpuHolder"></span>
            </h1>
            <h1 style="float:right">
                RAM: <span id="ramHolder"></span>
            </h1>

            <div id="placeholder" style="width: 600px; height: 300px; margin: 0 auto; float:right">
            </div>
            <div id="placeholderRam" style="width: 600px; height: 300px; margin: 0 auto; float:left">
            </div>

        </div>
    </div>
    <input type="hidden" id="customInput" data-value="@ViewBag.CustomValue" />
    <script>

        var intervaId ;

        var machineId = $("#customInput").data("value");
       
        var data1;
        //Create the proxy
        var chartData = $.connection.chartData;
       
        function init(machineId) {
            chartData.server.joinRoom(machineId);
            return chartData.server.initData(machineId);
        }

        chartData.client.updateData = function (data) {
            clearInterval(intervaId);
            update(data);
            intervaId= setInterval(function () { update(data); }, 1000);
        }


        // Start the connection
        $.connection.hub.start(
        function () {
            init(machineId);
        });

        var ypt = [], totalPoints = 30;
        var ramypt = [];
        function initData() {
            for (var i = 0; i < totalPoints; ++i)
                ypt.push(0);
            return getPoints();

        }
        function initDataRam() {
            for (var i = 0; i < totalPoints; ++i)
                ramypt.push(0);
            return getRamPoints();

        }
        function getData(data) {
            if (ypt.length > 0)
                ypt = ypt.slice(1);
            ypt.push(data);
            return getPoints();
        }
        function getRamData(data) {
            if (ramypt.length > 0)
                ramypt = ramypt.slice(1);
            ramypt.push(data);
            return getRamPoints();
        }
        function getPoints() {
            var ret = [];
            for (var i = 0; i < ypt.length; ++i)
                ret.push([i, ypt[i]]);
            return ret;
        }
        function getRamPoints() {
            var ret = [];
            for (var i = 0; i < ramypt.length; ++i)
                ret.push([i, ramypt[i]]);
            return ret;
        }

        // setup plot
        var options = {
            series: {

                lines: {
                    show: true
                },
                shadowSize: 0

            },
            grid: {
                borderWidth: 1,
                minBorderMargin: 20,
                labelMargin: 10,
                backgroundColor: {
                    colors: ["#fff", "#e4f4f4"]
                },
                margin: {
                    top: 8,
                    bottom: 20,
                    left: 20
                },
                markings: function (axes) {
                    var markings = [];
                    var xaxis = axes.xaxis;
                    for (var x = Math.floor(xaxis.min) ; x < xaxis.max; x += xaxis.tickSize * 2) {
                        markings.push({ xaxis: { from: x, to: x + xaxis.tickSize }, color: "rgba(232, 232, 255, 0.2)" });
                    }
                    return markings;
                }
            },// drawing is faster without shadows
            //yaxis: {
            // min: 0, max: 100,
            //tickFormatter: function (val, axis) {
            // return '$' + val;
            //}
            //},
            // xaxis: { show: false }
            xaxis: {
                show: false

            },
            yaxis: {
                min: 0,
                max: 110,

            },
            legend: {
                show: true
            }
        };
        var ramPlot = $.plot($("#placeholderRam"), [initDataRam()], options);

        var plot = $.plot($("#placeholder"), [initData()], options);
        function update(data) {

            $('#ramHolder').text(data.MemoryValue);
         console.log("updateData")
            ramPlot.setData([getRamData(data.MemoryValue)]);
            //console.log(data.MemoryValue)
            ramPlot.draw(getRamData(data.MemoryValue));
            $('#cpuHolder').text(data.CPUValue);
            plot.setData([getData(data.CPUValue)]);
            plot.draw();
            
        }
       
        
    </script>
</div>


